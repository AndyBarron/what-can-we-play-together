#! /usr/bin/env node
const axios = require('axios');
const fs = require('fs');
const mkdirRecursive = require('mkdir-recursive');
const path = require('path');
const serverConfig = require('server/config');
const steam = require('server/steam');
const sharedUtils = require('shared/utils');

const DATA_DIR = serverConfig.APP_DETAILS_DIR;

const setUpDataDir = async () => {
  mkdirRecursive.mkdirSync(DATA_DIR);
  const filePaths = fs.readdirSync(DATA_DIR)
    .filter(name => !name.startsWith('.'))
    .map(name => path.join(DATA_DIR, name));
  filePaths.map(fs.unlinkSync);
};

const getAppInfo = async (id) => {
  const response = await axios(`http://store.steampowered.com/api/appdetails/?appids=${id}`);
  const info = response.data[id].data;
  // TODO: Consider filtering by info.type === 'game'
  return info || null;
};

const main = async () => {
  setUpDataDir();
  const data = await steam.api('ISteamApps', 'GetAppList', null, 2);
  const apps = data.applist.apps;
  for (const app of apps) {
    const id = app.appid;
    const response = await axios(`http://store.steampowered.com/api/appdetails/?appids=${id}`);
    await sharedUtils.waitSeconds(2);
    const info = await getAppInfo(id);
    if (info) {
      const filePath = path.join(DATA_DIR, `${id}.json`);
      fs.writeFileSync(filePath, JSON.stringify(info, null, 2));
      console.info(`${id}: ${filePath}`);
    } else {
      console.info(`${id}: [null]`);
    }
  }
};

main().catch((e) => console.error(e));
