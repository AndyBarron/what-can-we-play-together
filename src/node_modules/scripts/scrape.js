#! /usr/bin/env node
const axios = require('axios');
const fs = require('fs');
const mkdirRecursive = require('mkdir-recursive');
const path = require('path');
const serverConfig = require('server/config');
const steam = require('server/steam');
const sharedUtils = require('shared/utils');

const DATA_DIR = serverConfig.APP_DETAILS_DIR;

const setUpDataDir = async (clean = false) => {
  mkdirRecursive.mkdirSync(DATA_DIR);
  if (clean) {
    const filePaths = fs.readdirSync(DATA_DIR)
      .filter(name => !name.startsWith('.'))
      .map(name => path.join(DATA_DIR, name));
    filePaths.map(fs.unlinkSync);
  }
};

const getAppInfo = async (id) => {
  const response = await axios(`http://store.steampowered.com/api/appdetails/?appids=${id}`);
  const info = response.data[id].data;
  // TODO: Consider filtering by info.type === 'game'
  return info || null;
};

const main = async (refresh = false) => {
  setUpDataDir();
  const data = await steam.api('ISteamApps', 'GetAppList', null, 2);
  const apps = data.applist.apps;
  // TODO: Remove data files for apps that don't exists in the app list
  for (const [index, app] of apps.entries()) {
    const id = app.appid;
    console.info(`App ID: ${id} (${index + 1} of ${apps.length})`);
    const filePath = path.join(DATA_DIR, `${id}.json`);
    let shouldFetch;
    if (!fs.existsSync(filePath)) {
      console.info('Fetching new app details...');
      shouldFetch = true;
    } else if (refresh) {
      console.info('Refreshing existing app details...');
      shouldFetch = true;
    } else {
      console.info('Skipping already fetched app details.');
      shouldFetch = false;
    }
    if (shouldFetch) {
      await sharedUtils.waitSeconds(2);
      const info = await getAppInfo(id);
      fs.writeFileSync(filePath, JSON.stringify(info, null, 2));
      console.info('...Done.');
    }
  }
};

main().catch((e) => console.error(e));
