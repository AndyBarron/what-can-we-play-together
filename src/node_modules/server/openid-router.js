const express = require('express');
const openid = require('openid');
const sharedConfig = require('shared/config');

const CLAIMED_IDENTIFIER_REGEX = /https?:\/\/(www\.)?steamcommunity\.com\/openid\/id\/[\d]+/;

const router = express.Router();

const createRelyingParty = (req) => {
  const verifyUrl = req.protocol + '://' + req.get('host') +
                    sharedConfig.OPENID_BASE_URL + sharedConfig.OPENID_VERIFY_URL;
  return new openid.RelyingParty(
    verifyUrl, // OpenID verification URL
    null, // Realm
    true, // Use stateless verification
    false, // Strict mode
    [], // Extensions
  );
};

const routes = {
  [sharedConfig.OPENID_AUTH_URL]: async (req, res) => {
    const identifier = `${req.protocol}://steamcommunity.com/openid`;
    const verifyUrl = req.protocol + '://' + req.get('host') +
                      sharedConfig.OPENID_BASE_URL + sharedConfig.OPENID_VERIFY_URL;
    const relyingParty = createRelyingParty(req);
    relyingParty.authenticate(identifier, false, (error, authUrl) => {
      if (error) {
        console.error('OpenID authentication error:');
        console.error(error);
        res.status(500);
        res.send('An error occurred while authenticating with Steam.');
        return;
      }
      res.redirect(authUrl);
    });
  },
  [sharedConfig.OPENID_VERIFY_URL]: async (req, res) => {
    const relyingParty = createRelyingParty(req);
    relyingParty.verifyAssertion(req, (error, result) => {
      if (!error && result) {
        if (!result.authenticated) {
          error = 'result.authenticated was false';
        } else if (!result.claimedIdentifier.match(CLAIMED_IDENTIFIER_REGEX)) {
          error = `Invalid claimed identifier: "${result.claimedIdentifier}"`;
        }
      }
      if (error) {
        console.error('OpenID verification error:');
        console.error(error);
        res.status(500);
        res.send('An error occurred while verifying your Steam login.');
        return;
      }
      const claimedId = result.claimedIdentifier;
      const id = claimedId.slice(claimedId.lastIndexOf('/') + 1);
      res.redirect(sharedConfig.PROFILE_URL.replace(':id', id));
    });
  },
}

for (const [route, handler] of Object.entries(routes)) {
  router.get(route, async (req, res) => {
    try {
      await handler(req, res);
    } catch (e) {
      console.error('Internal error:');
      console.error(e);
      res.status(500);
      res.send('An error occurred.');
    }
  });
}

module.exports = router;
